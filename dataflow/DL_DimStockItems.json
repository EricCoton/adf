{
	"name": "DL_DimStockItems",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "integrationDimStockItem",
						"type": "DatasetReference"
					},
					"name": "FromIntegrationDimStockItem"
				},
				{
					"dataset": {
						"referenceName": "DimStockItems",
						"type": "DatasetReference"
					},
					"name": "DimStockItemStreamFromDW"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimStockItems",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DimStockItems",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "drivedColumn2"
				},
				{
					"name": "aggregation1"
				},
				{
					"name": "exists1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "window1"
				},
				{
					"name": "currentStockItem"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Stock Item Staging Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> FromIntegrationDimStockItem",
				"source(output(",
				"          StockItemKey as integer,",
				"          WWIStockItemID as integer,",
				"          StockItem as string,",
				"          Color as string,",
				"          SellingPackage as string,",
				"          BuyingPackage as string,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          Photo as binary,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          LineageKey as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimStockItemStreamFromDW",
				"FromIntegrationDimStockItem derive(LinageKey = toInteger(toString(currentTimestamp()))) ~> derivedColumn1",
				"derivedColumn1 derive(LinageKey = iifNull(LinageKey, 0, LinageKey)) ~> drivedColumn2",
				"exists1 aggregate(groupBy({WWI Stock Item ID},",
				"          {Stock Item}),",
				"     validToFromSource = min({Valid From})) ~> aggregation1",
				"drivedColumn2, DimStockItemStreamFromDW exists({WWI Stock Item ID} == WWIStockItemID,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"select1 alterRow(updateIf(true())) ~> AlterRow1",
				"DimStockItemStreamFromDW window(over(WWIStockItemID),",
				"     desc(ValidTo, true),",
				"     asc(ValidFrom, true),",
				"     rank = rank()) ~> window1",
				"window1 filter(rank == 1) ~> currentStockItem",
				"aggregation1, currentStockItem join({WWI Stock Item ID} == WWIStockItemID,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          validTo = validToFromSource,",
				"          StockItemKey,",
				"          WWIStockItemID,",
				"          StockItem,",
				"          Color,",
				"          SellingPackage,",
				"          BuyingPackage,",
				"          Brand,",
				"          Size,",
				"          LeadTimeDays,",
				"          QuantityPerOuter,",
				"          IsChillerStock,",
				"          Barcode,",
				"          TaxRate,",
				"          UnitPrice,",
				"          RecommendedRetailPrice,",
				"          TypicalWeightPerUnit,",
				"          Photo,",
				"          ValidFrom,",
				"          LineageKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          StockItemKey as integer,",
				"          WWIStockItemID as integer,",
				"          StockItem as string,",
				"          Color as string,",
				"          SellingPackage as string,",
				"          BuyingPackage as string,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          Photo as binary,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          LineageKey as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['StockItemKey'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          StockItemKey,",
				"          WWIStockItemID,",
				"          StockItem,",
				"          Color,",
				"          SellingPackage,",
				"          BuyingPackage,",
				"          Brand,",
				"          Size,",
				"          LeadTimeDays,",
				"          QuantityPerOuter,",
				"          IsChillerStock,",
				"          Barcode,",
				"          TaxRate,",
				"          UnitPrice,",
				"          RecommendedRetailPrice,",
				"          TypicalWeightPerUnit,",
				"          Photo,",
				"          ValidFrom,",
				"          ValidTo = validTo,",
				"          LineageKey",
				"     )) ~> sink1",
				"drivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          StockItemKey as integer,",
				"          WWIStockItemID as integer,",
				"          StockItem as string,",
				"          Color as string,",
				"          SellingPackage as string,",
				"          BuyingPackage as string,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          Photo as binary,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          LineageKey as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          WWIStockItemID = {WWI Stock Item ID},",
				"          StockItem = {Stock Item},",
				"          Color,",
				"          SellingPackage = {Selling Package},",
				"          BuyingPackage = {Buying Package},",
				"          Brand,",
				"          Size,",
				"          LeadTimeDays = {Lead Time Days},",
				"          QuantityPerOuter = {Quantity Per Outer},",
				"          IsChillerStock = {Is Chiller Stock},",
				"          Barcode,",
				"          TaxRate = {Tax Rate},",
				"          UnitPrice = {Unit Price},",
				"          RecommendedRetailPrice = {Recommended Retail Price},",
				"          TypicalWeightPerUnit = {Typical Weight Per Unit},",
				"          Photo,",
				"          ValidFrom = {Valid From},",
				"          ValidTo = {Valid To},",
				"          LineageKey = LinageKey",
				"     )) ~> sink2"
			]
		}
	}
}